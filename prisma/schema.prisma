// Prisma generator for Prisma Client
generator client {
  provider = "prisma-client"
  output   = "./generated/client"
}

// PostgreSQL datasource config
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String    @id @default(uuid())
  clerkUserId     String    @unique
  email           String    @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bio             String?
  experience      Int?
  skills          String[]
  
  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
}

// Assessment model
model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float
  questions      Json[]
  category       String
  improvementTip String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

// Resume model
model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cover Letter model
model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

// Industry Insights model
model IndustryInsight {
  id                 String   @id @default(cuid())
  industry           String   @unique
  users              User[]

  salaryRanges       Json[]
  growthRate         Float
  demandLevel        String
  topSkills          String[]

  marketOutlook      String
  keyTrends          String[]

  recommendedSkills  String[]
  lastUpdated        DateTime @default(now())
  nextUpdate         DateTime

  @@index([industry])
}
